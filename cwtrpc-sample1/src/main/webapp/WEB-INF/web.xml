<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 IT Services VS GmbH

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
	version="2.4">
	<display-name>cwtrpc - Sample 1</display-name>
	
	<session-config>
		<session-timeout>3</session-timeout>
	</session-config>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/application-context.xml
		</param-value>
	</context-param>
	<context-param>
		<description>
			Defines the pre-loaded classes that are loaded before the Spring
			XML application context is initialized. The classes that are 
			included in the artifacts with the additional namespace 
			configuration for Spring XML application context. See the 
			description of ExtendedContextLoaderListener below for more 
			information.
		</description>
		<param-name>contextLoaderPreloadedClasses</param-name>
		<param-value>
			org.springframework.security.config.SecurityNamespaceHandler
			de.itsvs.cwtrpc.controller.config.CwtRpcControllerNamespaceHandler
		</param-value>
	</context-param>

	<filter>
		<description>
			Catches unexpected errors that are thrown in the filter chain and
			creates a appropriate response for GWT RPC clients. This filter 
			must only executed for GWT RPC requests.
		</description>
		<filter-name>Unexpected Error Filter</filter-name>
		<filter-class>de.itsvs.cwtrpc.controller.UnexpectedErrorFilter</filter-class>
	</filter>
	<filter>
		<description>
			Sets the HTTP cache control headers.
		</description>
		<filter-name>Cache Control Filter</filter-name>
		<filter-class>de.itsvs.cwtrpc.controller.CacheControlFilter</filter-class>
	</filter>
	<filter>
		<description>
			Standard Spring filter that invokes the Spring Security filter 
			chain.
		</description>
		<filter-name>Spring Security Filter Chain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>springSecurityFilterChain</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>Unexpected Error Filter</filter-name>
		<url-pattern>*.service</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>Cache Control Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>Spring Security Filter Chain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<listener>
		<description>
			Should be used instead of the standard ContextLoaderListener 
			that is provided by Spring, since artifacts resolved by Maven 
			when using the Eclipse integrated Web Toolkit runtime are availble
			only when explicitly loading them with the class loader. Otherwise
			configuration files included in the artifact are not available 
			(like namespace configuration used to configure Spring XML 
			application context). One class of the required artifacts must be
			loaded before initializing the Spring XML application context.
			These classes are configured with the context parameter 
			"contextLoaderPreloadedClasses".
			
			This is not required when you do not run the applicaion with the 
			Eclipse integrated Web Toolkit runtimes.
		</description>
		<listener-class>de.itsvs.cwtrpc.core.ExtendedContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<description>
			The controller servlet that executed the GWT based remote 
			services.
		</description>
		<servlet-name>Remote Service Controller Servlet</servlet-name>
		<servlet-class>de.itsvs.cwtrpc.controller.RemoteServiceControllerServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Remote Service Controller Servlet</servlet-name>
		<url-pattern>*.service</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
</web-app>
